{"version":3,"sources":["assets/xrp.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","setView","e","view","currentTarget","getAttribute","setState","state","className","src","XRP","alt","this","Component","Nav","onClick","target","NavLink","style","color","border","data-view","children","Content","hidden","Home","display","About","Contact","Footer","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac4334ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xrp.10009f1e.png\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport XRP from \"./assets/xrp.png\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: 2,\n    };\n  }\n  setView = (e) => {\n    let view = +e.currentTarget.getAttribute(\"data-view\");\n    this.setState({ view });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={XRP} alt=\"x\"></img>\n        </header>\n        <Nav view={this.state.view} setView={this.setView} />\n        <Content view={this.state.view} setView={this.setView} />\n        <Footer />\n        <h2>\n          <span className=\"one\">OVERNIGHT</span>\n        </h2>\n      </div>\n    );\n  }\n}\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"Nav\">\n        <NavLink onClick={this.props.setView} target=\"0\" view={this.props.view}>\n          One\n        </NavLink>\n        <NavLink onClick={this.props.setView} target=\"1\" view={this.props.view}>\n          Two\n        </NavLink>\n        <NavLink onClick={this.props.setView} target=\"2\" view={this.props.view}>\n          Three\n        </NavLink>\n      </div>\n    );\n  }\n}\n\nclass NavLink extends Component {\n  render() {\n    let style = {\n      color:\n        this.props.view === +this.props.target\n          ? \"lightskyblue\"\n          : \"lightskyblue\",\n      border:\n        this.props.view === +this.props.target\n          ? \"3px outset orange\"\n          : \"3px outset lightskyblue\",\n    };\n    return (\n      <div\n        className=\"NavLink\"\n        onClick={this.props.onClick}\n        data-view={this.props.target}\n        style={style}\n      >\n        <span>{this.props.children}</span>\n      </div>\n    );\n  }\n}\n\nclass Content extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Home setView={this.props.setView} hidden={this.props.view !== 0} />\n        <About setView={this.props.setView} hidden={this.props.view !== 1} />\n        <Contact hidden={this.props.view !== 2} />\n      </div>\n    );\n  }\n}\nclass Home extends Component {\n  render() {\n    let style = {\n      display: this.props.hidden ? \"none\" : \"flex\",\n    };\n    return (\n      <div className=\"container\" style={style}>\n        Phase One:\n        <br />\n        <br />\n        <p className=\"percent\">COMPLETE!</p>\n      </div>\n    );\n  }\n}\nclass About extends Component {\n  render() {\n    let style = {\n      display: this.props.hidden ? \"none\" : \"flex\",\n    };\n    return (\n      <div className=\"container\" style={style}>\n        Phase Two:\n        <br />\n        <br />\n        <p className=\"percent\">COMPLETE!</p>\n      </div>\n    );\n  }\n}\n\nclass Contact extends Component {\n  render() {\n    let style = {\n      display: this.props.hidden ? \"none\" : \"flex\",\n    };\n    return (\n      <div className=\"portal\" style={style}>\n        Phase Three:\n        <br />\n        <br /> <p className=\"percent\"> 11.01.2020</p>\n      </div>\n    );\n  }\n}\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        In{\" \"}\n        <a href=\"https://twitter.com/BabaCugs\" target=\"_blank\">\n          Baba\n        </a>{\" \"}\n        We Trust\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}